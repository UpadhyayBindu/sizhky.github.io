<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flavours of a Nerd</title>
    <description>A reserved space to show my views, progress and checkpoints that relate to technical, spiritual and artsy stuff I do.</description>
    <link>http://sizhky.github.io//</link>
    <atom:link href="http://sizhky.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 15 Jul 2016 16:30:59 +0530</pubDate>
    <lastBuildDate>Fri, 15 Jul 2016 16:30:59 +0530</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Something</title>
        <description>&lt;h1 id=&quot;do-you-wanna-know&quot;&gt;Do you wanna know?&lt;/h1&gt;

&lt;h2 id=&quot;random-random&quot;&gt;Random random&lt;/h2&gt;

&lt;h3 id=&quot;more-randomness&quot;&gt;More randomness&lt;/h3&gt;

&lt;p&gt;What is the meaning of all this?&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Jul 2016 16:30:59 +0530</pubDate>
        <link>http://sizhky.github.io//random/2016/07/something.html</link>
        <guid isPermaLink="true">http://sizhky.github.io//random/2016/07/something.html</guid>
        
        
        <category>random</category>
        
      </item>
    
      <item>
        <title>Barebones Git</title>
        <description>&lt;p&gt;Many people I know confuse Git with Github, and probably don’t have a good idea of how powerful version control is. I guess, half the trouble with it is the steepness of the learning curve, not to mention how wonky even the concept of version control is. I’ve had my own million doubts in using Git and never knew where to start. Even if I did start, I’d have given up on the second day not understanding why certain thing is the way it is.&lt;/p&gt;

&lt;p&gt;This post is just for that, to de-mistify what a good tool Git is and how easy it is to integrate into the workflow and, really, master version control with only a handful of commands. I hope the days of copy-pasting a file in the name of ‘backup’ are a days of the past.&lt;/p&gt;

&lt;h2 id=&quot;firstly&quot;&gt;Firstly…&lt;/h2&gt;
&lt;p&gt;Git is a version control software, created by &lt;a href=&quot;https://www.linux.com/blog/10-years-git-interview-git-creator-linus-torvalds&quot;&gt;Linus Torvalds&lt;/a&gt;, the founder of Linux. &lt;a href=&quot;github.com&quot;&gt;Github&lt;/a&gt;, on the other hand is a neat platform to share and store code along with all the goodness of git. Github, is by default, a free platform at the cost of hosting the contents visible to the public. There’s a subscription service to have propitiatory projects stored online in all secrecy. Even though Git can seamlessly integrate with Github, it is however, also compatible with other code sharing platforms or just any location for that matter (ftps and shared networks, included)&lt;/p&gt;

&lt;h2 id=&quot;secondly&quot;&gt;Secondly…&lt;/h2&gt;
&lt;p&gt;It’s all about practice. Let’s dedicate this section to create a setup, to restore backups, without copy-pasting a single file.&lt;/p&gt;

&lt;h3 id=&quot;lets-start-setting-up-in-an-empty-folder-ill-name-it-gittut&quot;&gt;Let’s start setting up in an empty folder (I’ll name it gittut)&lt;/h3&gt;

&lt;p&gt;The magic starts with initializing a Git repository&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\&amp;gt;mkdir gittut

C:\...\&amp;gt;cd gittut

C:\...\gittut&amp;gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It means that the folder is ready for some version control action! The only visible difference would be that there is be .git folder created in the directory which is hidden by default. The takeaway point is that any location containing a .git folder means one or more (generally all) files have versions which Git is handling. Let’s create a text file named ‘my.txt’.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;more my.txt
First line, nothing more!!

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gittut/initialized_folder.jpg&quot; alt=&quot;on my waaaay!&quot; /&gt;
&lt;em&gt;the current folder would look like this&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Git still wouldn’t know that something new has been added. Technically, it hasn’t started &lt;em&gt;tracking&lt;/em&gt; any files.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;git status
On branch master

Initial commit

Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        my.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git status gives, well, the current status of the folder.&lt;/p&gt;

&lt;h3 id=&quot;the-way-to-start-tracking-a-file-is&quot;&gt;The way to start tracking a file is&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;git add my.txt

C:\...\gittut&amp;gt;git status
On branch master

Initial commit

Changes to be committed:
  (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)

        new file:   my.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To add all the files in a folder, one would &lt;code class=&quot;highlighter-rouge&quot;&gt;git add -A&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;lets-see-what-happens-after-editing-the-text-file&quot;&gt;Let’s see what happens after editing the text file…&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;more my.txt
First line, nothing more!! :3

Second line... ADDED!

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There was a modification in the first line ‘:3’ and a second line was added.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;git status
On branch master

Initial commit

Changes to be committed:
  (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)

        new file:   my.txt

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

        modified:   my.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git notifies the modification that happend with respect to the state when a file was added. This is because, the moment we &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; a file (to what is called as a stage), it freezes the state of the file for a possible commit. And any modifications after &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; -ing a file will not be committed in the future. &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; functions as a soft commit where if a code goes awry after modification, one could always go back to the state when it was &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; -ed. &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout my.txt&lt;/code&gt; would essentially revert back the text file to the state when it was added for staging.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\...\gittut&amp;gt;git checkout my.txt

C:\...\gittut&amp;gt;more my.txt
First line, nothing more!!

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this way, it is always possible to revert a dysfunctional code back to a working state (given you &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; the file to stage everytime a code works just fine). There’s your backup isn’t it!?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Of course! We’ve just scratched the surface of the shell. We barely tickled the tentacles and hardly glanced at the ginormous gizmo, which is Git. There’s more to git than simple &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; command.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jul 2016 18:43:38 +0530</pubDate>
        <link>http://sizhky.github.io//posts/2016/07/barebones-git.html</link>
        <guid isPermaLink="true">http://sizhky.github.io//posts/2016/07/barebones-git.html</guid>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Baby Steps</title>
        <description>&lt;p&gt;It’s been ages since I wanted to get hold of a blog. Not blogpost or Wordpress or any of those things. I wanted something under my own control. I’ve found it! This is it! #2muchOptimism&lt;/p&gt;

&lt;p&gt;So here’s a bird’s eye view on &lt;a href=&quot;https://www.youtube.com/watch?v=EtqZVTIro_c&quot;&gt;how it’s done&lt;/a&gt;. That is, to setup a barebones structure for a website and have it running on a local server. Github is a great place to host the blog (it’s free!) and show the world what you know (what do you know, really?). Well, there are important things to nail, now that the foundation has been laid. Markdown, more jekyll, more themes and more, you know, writing. I guess this will be a good start. Maybe, the next post would be an actual tutorial (instead of the just a youtube link) to get a blog running on github, barebones style.&lt;/p&gt;

&lt;p&gt;This will be it for the blog post! I’ll just leave the default text hanging around.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Jul 2016 20:35:38 +0530</pubDate>
        <link>http://sizhky.github.io//posts/2016/07/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://sizhky.github.io//posts/2016/07/welcome-to-jekyll.html</guid>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
